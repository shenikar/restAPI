basePath: /
definitions:
  models.CompleteTaskRequest:
    properties:
      task_id:
        example: 1
        type: integer
    type: object
  models.CompleteTaskResponse:
    properties:
      message:
        example: Задание успешно выполнено
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.ErrorResponse:
    properties:
      error:
        example: Произошла ошибка
        type: string
    type: object
  models.LoginRequest:
    properties:
      password:
        example: password123
        type: string
      username:
        example: testuser
        type: string
    type: object
  models.LoginResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  models.SetReferrerRequest:
    properties:
      referrer_id:
        example: 2
        type: integer
    type: object
  models.SetReferrerResponse:
    properties:
      message:
        example: Реферер успешно установлен
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.UserLeaderboardResponse:
    properties:
      id:
        example: 1
        type: integer
      points:
        example: 100
        type: integer
      username:
        example: testuser
        type: string
    type: object
  models.UserStatusResponse:
    properties:
      created_at:
        example: "2025-04-02T15:37:13.347084Z"
        type: string
      email:
        example: test@example.com
        type: string
      id:
        example: 1
        type: integer
      points:
        example: 100
        type: integer
      updated_at:
        example: "2025-04-02T15:37:13.347084Z"
        type: string
      username:
        example: testuser
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API для управления пользователями и заданиями
  title: User Management API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Вход в систему и получение JWT токена
      parameters:
      - description: Данные для входа
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Аутентификация пользователя
      tags:
      - auth
  /users/{id}/referrer:
    post:
      consumes:
      - application/json
      description: Установка пользователя, который пригласил текущего пользователя
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      - description: Данные реферера
        in: body
        name: referrer
        required: true
        schema:
          $ref: '#/definitions/models.SetReferrerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SetReferrerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Установка реферера
      tags:
      - users
  /users/{id}/status:
    get:
      consumes:
      - application/json
      description: Получение информации о пользователе и его балансе
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserStatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Получение статуса пользователя
      tags:
      - users
  /users/{id}/task/complete:
    post:
      consumes:
      - application/json
      description: Отметка задания как выполненного и начисление поинтов
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      - description: Данные задания
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.CompleteTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CompleteTaskResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Выполнение задания
      tags:
      - tasks
  /users/leaderboard:
    get:
      consumes:
      - application/json
      description: Получение списка пользователей, отсортированного по количеству
        поинтов
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserLeaderboardResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Получение таблицы лидеров
      tags:
      - users
swagger: "2.0"
